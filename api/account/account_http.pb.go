// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.3

package account

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type AccountHTTPServer interface {
	DeleteAccount(context.Context, *GetAccountRequest) (*AccountCommonReplay, error)
	GetAccount(context.Context, *GetAccountRequest) (*AccountReply, error)
	ListAccount(context.Context, *ListAccountRequest) (*ListAccountReplay, error)
	Login(context.Context, *LoginRequest) (*AccountReply, error)
	RegisterAccount(context.Context, *RegisterRequest) (*AccountReply, error)
	UpdateAccount(context.Context, *UpdateAccountRequest) (*AccountReply, error)
}

func RegisterAccountHTTPServer(s *http.Server, srv AccountHTTPServer) {
	r := s.Route("/")
	r.POST("/account/login", _Account_Login0_HTTP_Handler(srv))
	r.GET("/account/get", _Account_GetAccount0_HTTP_Handler(srv))
	r.POST("/account/register", _Account_RegisterAccount0_HTTP_Handler(srv))
	r.POST("/account/update", _Account_UpdateAccount0_HTTP_Handler(srv))
	r.POST("/account/delete", _Account_DeleteAccount0_HTTP_Handler(srv))
	r.GET("/account/list", _Account_ListAccount0_HTTP_Handler(srv))
}

func _Account_Login0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.account.Account/Login")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AccountReply)
		return ctx.Result(200, reply)
	}
}

func _Account_GetAccount0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAccountRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.account.Account/GetAccount")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAccount(ctx, req.(*GetAccountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AccountReply)
		return ctx.Result(200, reply)
	}
}

func _Account_RegisterAccount0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.account.Account/RegisterAccount")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RegisterAccount(ctx, req.(*RegisterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AccountReply)
		return ctx.Result(200, reply)
	}
}

func _Account_UpdateAccount0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAccountRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.account.Account/UpdateAccount")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAccount(ctx, req.(*UpdateAccountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AccountReply)
		return ctx.Result(200, reply)
	}
}

func _Account_DeleteAccount0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAccountRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.account.Account/DeleteAccount")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAccount(ctx, req.(*GetAccountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AccountCommonReplay)
		return ctx.Result(200, reply)
	}
}

func _Account_ListAccount0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAccountRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.account.Account/ListAccount")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAccount(ctx, req.(*ListAccountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAccountReplay)
		return ctx.Result(200, reply)
	}
}

type AccountHTTPClient interface {
	DeleteAccount(ctx context.Context, req *GetAccountRequest, opts ...http.CallOption) (rsp *AccountCommonReplay, err error)
	GetAccount(ctx context.Context, req *GetAccountRequest, opts ...http.CallOption) (rsp *AccountReply, err error)
	ListAccount(ctx context.Context, req *ListAccountRequest, opts ...http.CallOption) (rsp *ListAccountReplay, err error)
	Login(ctx context.Context, req *LoginRequest, opts ...http.CallOption) (rsp *AccountReply, err error)
	RegisterAccount(ctx context.Context, req *RegisterRequest, opts ...http.CallOption) (rsp *AccountReply, err error)
	UpdateAccount(ctx context.Context, req *UpdateAccountRequest, opts ...http.CallOption) (rsp *AccountReply, err error)
}

type AccountHTTPClientImpl struct {
	cc *http.Client
}

func NewAccountHTTPClient(client *http.Client) AccountHTTPClient {
	return &AccountHTTPClientImpl{client}
}

func (c *AccountHTTPClientImpl) DeleteAccount(ctx context.Context, in *GetAccountRequest, opts ...http.CallOption) (*AccountCommonReplay, error) {
	var out AccountCommonReplay
	pattern := "/account/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.account.Account/DeleteAccount"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...http.CallOption) (*AccountReply, error) {
	var out AccountReply
	pattern := "/account/get"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.account.Account/GetAccount"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) ListAccount(ctx context.Context, in *ListAccountRequest, opts ...http.CallOption) (*ListAccountReplay, error) {
	var out ListAccountReplay
	pattern := "/account/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.account.Account/ListAccount"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) Login(ctx context.Context, in *LoginRequest, opts ...http.CallOption) (*AccountReply, error) {
	var out AccountReply
	pattern := "/account/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.account.Account/Login"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) RegisterAccount(ctx context.Context, in *RegisterRequest, opts ...http.CallOption) (*AccountReply, error) {
	var out AccountReply
	pattern := "/account/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.account.Account/RegisterAccount"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...http.CallOption) (*AccountReply, error) {
	var out AccountReply
	pattern := "/account/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.account.Account/UpdateAccount"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
